* Intro
piggybacking off mlaventure's emacs config redo
https://github.com/mlaventure/emacs-config/blob/master/.emacs.d/config.org
* Package Management
This section has to be first, otherwise required packages won't be
able to be installed and loaded
** Package Manager
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (add-to-list 'package-archives
                 '("melpa" . "http://melpa.milkbox.net/packages/") t)
    (package-initialize)
  #+END_SRC
** Refresh Package Archive
Refresh the package list content if if doesn't exist yet (so only
  done the first time this configuration is loaded). We don't want to
  do it at every start, it would slow us down too much
  #+BEGIN_SRC emacs-lisp
    (unless package-archive-contents
      (package-refresh-contents))
  #+END_SRC
** Activate-Package Helper (from mlaventure)
Here we define a handy helper that will install a package if it's
not yet present then require it
  #+BEGIN_SRC emacs-lisp
    (defun activate-package (pkg)
      "Install a package if it is not present then require it"
      (unless (package-installed-p pkg)
        (package-install pkg))
      (require pkg))
  #+END_SRC
** use-package
Let's try and make use of [[https://github.com/jwiegley/use-package][use-package]]. And set it to always install
packages if they're not present.
  #+BEGIN_SRC emacs-lisp
    (activate-package 'use-package)
    (setq use-package-always-ensure t)
  #+END_SRC
** auto-compile
Use auto-compile to always get up-to-date compiled packages
  #+BEGIN_SRC emacs-lisp
    (use-package auto-compile
                 :init
                 (setq load-prefer-newer t)
                 :commands (auto-compile-on-load-mode)
                 :config
                 (setq auto-compile-display-buffer nil)
                 (setq auto-compile-mode-line-counter t)
                 (auto-compile-on-load-mode))
                 
  #+END_SRC
* Basic Tooling, General Settings and One Liners
** one-liners
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
               :config
               (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-startup-screen t)
  ; custom theme
  (load-theme 'icy-hex-gui t)
  ; line numbers
  (global-linum-mode 1)
  (setq column-number-mode t)
  ; Window Movement (Shift+Direction)
  (windmove-default-keybindings)
  (setq windmove-wrap-around t)
  ; Make windmove work in org-mode:
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)
  ; highlight current line
  (global-hl-line-mode t)
  ; no tabs (only spaces)
  (setq-default indent-tabs-mode nil)
  ; enforce 80 column rule
  (autoload 'column-enforce-mode "column-enforce-mode" nil t)
  ; use zsh
  (setq shell-file-name "zsh")
  (setq shell-command-switch "-ic")
  ; simpleclip
  (use-package simpleclip
    :init
    (setq simpleclip-mode 1))
  ; camelCase navigation
  (global-subword-mode t)
  ; Teach emacs to accept =y= and =n= for =yes= and =no=.
  (fset 'yes-or-no-p 'y-or-n-p)
  ; (C-z) Don't suspend on C-z. I do this too often.
  (global-unset-key (kbd "C-z"))
#+END_SRC
** Saves
   Make Saves go in another directory
   Make more of them
  #+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist `(("." . "~/.saves"))
          backup-by-copying t
          delete-old-versions t
          kept-new-versions 6
          kept-old-versions 2
          version-control t)
  #+END_SRC
** YASnippets
  #+BEGIN_SRC emacs-lisp
        (use-package yasnippet
          :config
          (progn
            (yas-global-mode 1)
            (setq-default yas-snippet-dirs
                  '("~/.emacs.d/snippets" ;; snippets from git repo
                    ))
            (define-key yas-minor-mode-map (kbd "C-c y") #'yas-insert-snippet)))
  #+END_SRC
** KeyFreq
   #+BEGIN_SRC emacs-lisp
     (use-package keyfreq
       :ensure t
       :init (keyfreq-mode 1)
     (keyfreq-autosave-mode 1)
       :config
       (setq keyfreq-excluded-commands
           '(self-insert-command
             abort-recursive-edit
             previous-line
             next-line)))

   #+END_SRC
** NeoTree
   #+BEGIN_SRC emacs-lisp
         (use-package neotree
                      :after all-the-icons
                      :init
                      (setq neo-smart-open t)
                      (setq neo-theme (if window-system 'icons 'arrow))
                      (setq projectile-switch-project-action 'neotree-projectile-action)
                      :commands (neotree-toggle)
                      :bind ("<f8>" . neotree-toggle))

   #+END_SRC
** abbrev-mode
   #+BEGIN_SRC emacs-lisp
     (use-package abbrev
       :diminish abbrev-mode
       :config (progn
                 (if (file-exists-p abbrev-file-name)
                     (quietly-read-abbrev-file))
                 (dolist (hook '(markdown-mode-hook
                                 text-mode-hook))
                   (add-hook hook (lambda () (abbrev-mode 1))))))
   #+END_SRC
* Modes
** spaceline
   #+BEGIN_SRC emacs-lisp
     (use-package spaceline-config
       :ensure spaceline
       :config
       (spaceline-emacs-theme))
     (use-package spaceline-all-the-icons
       :after spaceline
       :config (progn
                 (spaceline-all-the-icons-theme)
                 (spaceline-all-the-icons--setup-package-updates)
                 (spaceline-all-the-icons--setup-neotree)
                 (spaceline-all-the-icons--setup-git-ahead)
                 (setq spaceline-all-the-icons-separator-type 'slant)))
   #+END_SRC
** Visual Regexp
#+BEGIN_SRC emacs-lisp
  (use-package visual-regexp-steroids
    :bind
    ("C-c r" . vr/replace)
    ("C-c q" . vr/query-replace)
    ;; to use visual-regexp-steroids's isearch instead of the
    ;; built-in regexp isearch, also include the following lines:
    ("C-r" . vr/isearch-backward)
    ("C-s" . vr/isearch-forward))
#+END_SRC
** Avy (previously Ace-Jump-Mode)
  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :init (avy-setup-default)
      :bind (("C-c SPC" . avy-goto-char)
             ("M-g g" . avy-goto-line)
             ("M-g e" . avy-goto-word-0)
             ("M-g w" . avy-goto-word-1)))

  #+END_SRC
** ace-window
    #+BEGIN_SRC emacs-lisp
      (use-package ace-window
        :bind ("C-x o" . ace-window))
    #+END_SRC
** (M-x) smex
  #+BEGIN_SRC emacs-lisp
    ;; "Smex is a M-x enhancement for Emacs, it provides a convenient interface to your recently and most frequently used commands."
    (use-package smex
      :bind (("M-x" . smex)
             ("M-X" . smex-major-mode-commands)
             ("C-c C-c M-x" . execute-extended-command)))
  #+END_SRC
** Rainbow Mode
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)

  (use-package rainbow-delimiters
    :config (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

  ;; rainbow representations of hex/etc colors
  (use-package rainbow-mode
    :config (progn
    (add-hook 'less-mode-hook 'rainbow-mode)
    (add-hook 'sass-mode-hook 'rainbow-mode)
    (add-hook 'web-mode-hook 'rainbow-mode)
    (add-hook 'org-mode-hook 'rainbow-mode)))
#+END_SRC
** auto-complete-mode
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete)
#+END_SRC
** focus-mode
#+BEGIN_SRC emacs-lisp
  (use-package focus
    :config (add-hook 'markdown-mode 'focus-mode))
#+END_SRC
** ack
#+BEGIN_SRC emacs-lisp
  (use-package ack)
#+END_SRC
* Org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (progn
      (set 'my-orgdir "~/Dropbox/__notes/_org")
      (setq org-src-fontify-natively t
            org-agenda-files (list (concat my-orgdir "/personal.org"))
            org-default-notes-file (concat my-orgdir "/notes.org")
            org-capture-templates
            '(("t" "Todo" entry (file+headline (concat my-orgdir "/todo.org") "Tasks")
               "* TODO %?\n  %i\n  %a")
              ("j" "Journal" entry (file+datetree (concat my-orgdir "/journal.org"))
               "* %?\nEntered on %U\n  %i\n  %a"))))
    :bind ("\C-cc" . org-capture))

  (use-package org-bullets
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    :init (setq org-hide-leading-stars t
                org-ellipsis " \u25bc"))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t)
     (emacs-lisp . t)
     (awk . t)
     (haskell . t)
     (css . t)
     (js . t)))
#+END_SRC
** org-capture-alfred
#+BEGIN_SRC emacs-lisp
  (defun make-orgcapture-frame ()
    "Create a new frame and run org-capture."
    (interactive)
    (make-frame '((name . "remember") (width . 80) (height . 16)
                  (top . 400) (left . 300)
                  (font . "-apple-Monaco-medium-normal-normal-*-13-*-*-*-m-0-iso10646-1")
                  ))
    (select-frame-by-name "remember")
    (org-capture))
#+END_SRC
* Magit
  #+BEGIN_SRC emacs-lisp
    (use-package magit
          :load-path "~/elisp/magit"
          :config
          (progn
            (setq magit-diff-options '("-b")) ; ignore whitespace
    )
          :bind (("C-x v d" . magit-status)
                 ("C-x v C-d" . my/magit-status-in-directory)
                 ("C-x v p" . magit-push)
                 ("C-x v c" . my/magit-commit-all)))
    (global-set-key (kbd "C-x g") 'magit-status)
  #+END_SRC
* LANG
** JavaScript
*** web-mode
**** Force *jsx* mode for all .jsx? files
     This gives us JSX highlighting
      #+BEGIN_SRC emacs-lisp
        (use-package web-mode
          :init (progn
                  (setq web-mode-markup-indent-offset 2
                        web-mode-css-indent-offset 2
                        web-mode-code-indent-offset 2
                        web-mode-attr-indent-offset 2
                        web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))
                        ))
          :mode (("\\.html\\'" . web-mode)
                 ("\\.jsx?$" . web-mode)
                 ("\\.json$" . web-mode)
                 ("\\.css$" . web-mode)
                 )
          :config (progn
                    (add-hook 'local-write-file-hooks
                              (lambda ()
                                (delete-trailing-whitespace)
                                nil))
                    '(js3-auto-indent-p t)
                    '(js3-consistent-level-indent-inner-bracket t)
                    '(js3-curly-indent-offset 2)
                    '(js3-enter-indents-newline t)
                    '(js3-expr-indent-offset 2)
                    '(js3-indent-level 0)
                    '(js3-indent-on-enter-key t)
                    '(js3-lazy-commas t)
                    '(js3-paren-indent-offset 2)
                    '(js3-square-indent-offset 2)
                    )
        )
        (use-package prettier-js
          :after web-mode
          :config (progn
                    (add-hook 'web-mode-hook 'prettier-js-mode)
                    (add-hook 'markdown-mode-hook 'prettier-js-mode))
        )
#+END_SRC
** Lisp
*** Slime
#+BEGIN_SRC emacs-lisp
  (setq slime-contribs '(slime-fancy
                         slime-indentation
                         slime-sbcl-exts
                         slime-scratch)
        inferior-lisp-program "sbcl")
#+END_SRC
*** Paredit
  #+BEGIN_SRC emacs-lisp
    (use-package paredit
      :config (progn
                (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
                (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
                (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
                (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
                (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
                (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
                (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
                (add-hook 'clojure-mode-hook 'paredit-mode)
                ))

  #+END_SRC
** SQL
#+BEGIN_SRC emacs-lisp
  (use-package sql-mode
    :mode ("\\.sql" . sql-mode))
  (when (require 'sql-upcase nil :noerror)
     (add-hook 'sql-mode-hook 'sql-upcase-mode)
     (add-hook 'sql-interactive-mode-hook 'sql-upcase-mode))
#+END_SRC
** Golang
Install go-mode and set it up to use =goimports= to format our
files. go-mode depends on the following tools:
    - [[github.com/rogpeppe/godef][godef]]
    - [[golang.org/x/tools/cmd/goimports][goimports]]
    - [[golang.org/x/tools/cmd/godoc][godoc]]
    #+BEGIN_SRC emacs-lisp
      (use-package go-mode
        :commands (gofmt-before-save)
        :bind (("C-c C-c" . comment-dwim)
               :map go-mode-map
                    ("C-c C-r" . go-remove-unused-imports)
                    ("M-." . godef-jump))
        :mode ("\\.go" . go-mode)
        :config
        (setq gofmt-command "goimports")
        (add-hook 'before-save-hook   'gofmt-before-save)
        (add-hook 'go-mode-hook       'column-enforce-mode)
        (add-hook 'go-mode-hook       (lambda () (flyspell-prog-mode))))

      ;; Install [[https://github.com/syohex/emacs-go-eldoc][go-eldoc]] to see
      ;;  variable, return value and function argument
      ;; in the echo area. It depends on [[github.com/nsf/gocode][gocode]].
      (use-package go-eldoc
        :after go-mode
        :config
        (add-hook 'go-mode-hook 'go-eldoc-setup))
      ;; Activate completion with
      ;; [[https://github.com/nsf/gocode/tree/master/emacs-company][company-go]]
      (use-package company-go
        :after company
        :config
        (setq company-idle-delay .1
              company-echo-delay 0)
        (add-hook 'go-mode-hook (lambda ()
                                  (set (make-local-variable
                                        'company-backends) '(company-go))
                                  (company-mode))))
      ;; Use go-guru, it depends on the
      ;; [[https://godoc.org/golang.org/x/tools/cmd/guru][guru]] tool.
      (use-package go-guru
        :after go-mode
        :commands (go-guru-hl-identifier-mode)
        :config
        (define-key go-mode-map (kbd "C-c g") 'go-guru-map)
        (add-hook 'go-mode-hook 'go-guru-hl-identifier-mode))
      ;; Make use of
      ;; [[https://github.com/emacsmirror/godoctor][godoctor.el]], it
      ;; depends on the [[http://gorefactor.org/][godocotor]] utility
      (use-package godoctor
        :bind (("C-c d r" . godoctor-rename)
               ("C-c d e" . godoctor-extract)
               ("C-c d t" . godoctor-toggle)
               ("C-c d g" . godoctor-godoc)))

      ;; flycheck-gometalinter
      (use-package flycheck-gometalinter
        :config
        (progn
          (flycheck-gometalinter-setup)))
    #+END_SRC
    #+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "pandoc"))
    :config (setq markdown-fontify-code-blocks-natively t)
#+END_SRC
** YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :mode (("\\.ya?ml" . yaml-mode)))
#+END_SRC
* Arbitrary File Associations
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'auto-mode-alist '("Dockerfile" . shell-script-mode))
    (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
    (add-to-list 'auto-mode-alist '("\\.scss$" . sass-mode))
    (add-to-list 'auto-mode-alist '("\\.rc$" . restclient-mode))
  #+END_SRC
* UI
** Navigation
*** Swap buffer around with C-Shift-<key>
  #+BEGIN_SRC emacs-lisp
    (use-package buffer-move
      :bind (("C-S-<up>" . buf-move-up)
             ("C-S-<down>" . buf-move-down)
             ("C-S-<left>" . buf-move-left)
             ("C-S-<right>" . buf-move-right)))
  #+END_SRC
*** [[https://www.emacswiki.org/emacs/WinnerMode][Winner mode]] allow us to jump between window configuration using =C-c
  <left>= and =C-c <right>=. Very useful when wanting to see one
  buffer with more space then be back to comparison for instance
    #+BEGIN_SRC emacs-lisp
      (when (fboundp 'winner-mode)
        (winner-mode 1))
    #+END_SRC
*** Use [[https://github.com/justbur/emacs-which-key][which-key]] to help us figure out what we can do next
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :defer 5
    :diminish which-key-mode
    :init
    (setq which-key-sort-order 'which-key-key-order-alpha)
    :bind* (("M-m ?" . which-key-show-top-level))
    :config
    (which-key-mode)
    (which-key-add-key-based-replacements
      "M-m ?" "top level bindings"))
#+END_SRC
- Unbind =C-z=, I don't want my GUI emacs to disappear on me
  #+BEGIN_SRC emacs-lisp
    (global-unset-key (kbd "C-z"))
  #+END_SRC
- Enable [[https://github.com/Fuco1/smartparens][smartparens]] to automatically have our pairs matched for us
  #+BEGIN_SRC emacs-lisp
    (use-package smartparens-config
      :ensure smartparens
      :config
      (progn
        (show-smartparens-global-mode t)))

    (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
  #+END_SRC
** Mode-line customization
- Better unique filename. We want to see =file|file= and =file|titi=
  when opening =/toto/file= and =/titi/file= instead of =file<x>=.
  #+BEGIN_SRC emacs-lisp
    (use-package uniquify
      :ensure nil ;; this is a builtin package
      :config
      (setq uniquify-buffer-name-style 'post-forward))
  #+END_SRC
** Highlight or Fix some common mistakes
- Trailing whitespaces
  #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))
  #+END_SRC
- 80 columns rule using [[https://www.emacswiki.org/emacs/FillColumnIndicator][fill-column-indicator]]
  #+BEGIN_SRC emacs-lisp
    (use-package fill-column-indicator
      :commands (fci-mode)
      :init
      (setq fci-rule-width          3
            fci-rule-column         79
            fci-rule-use-dashes     t
            fci-rule-color          "plum")
      (define-globalized-minor-mode global-fci-mode fci-mode (lambda ()
                                                               (if buffer-file-name (fci-mode 1)
                                                                 (fci-mode 0))))
      (global-fci-mode 1))
  #+END_SRC
- At 100 columns, use [[https://github.com/jordonbiondo/column-enforce-mode][column-enforce-mode]] instead. We set the color of
  faulty characters to "violet red"
  #+BEGIN_SRC emacs-lisp
    (use-package column-enforce-mode
      :commands (column-enforce-mode)
      :config
      (setq column-enforce-column 100)
      (custom-set-faces
            `(column-enforce-face ((t (:inherit font-lock-warning-face :underline t :foreground "violet red"))))))
  #+END_SRC
- Always add a newline at end of files, and default tab to 4 spaces
  #+BEGIN_SRC emacs-lisp
    (setq mode-require-final-newline t
          tab-width 4)
  #+END_SRC
* Encoding System
UTF-8 for all the things!
#+BEGIN_SRC emacs-lisp
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8-auto-unix)
#+END_SRC
* Undo Tree
[[https://www.emacswiki.org/emacs/UndoTree][undo-tree]] provide a visual tree of the undo that we have made.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :bind (("<f7>" . undo-tree-visualize))
    :config
    (setq undo-tree-auto-save-history t
          undo-tree-visualizer-diff t)
    (let ((undo-dir (expand-file-name "undo" user-emacs-directory)))
      (setq undo-tree-history-directory-alist `((".*" . ,undo-dir))))
    (global-undo-tree-mode))

#+END_SRC
* Flyspell
Let's have some warning when we type things wrong ate
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :config
    (add-hook 'flyspell-mode-hook 'flyspell-buffer)
    (setq flyspell-issue-message-flag nil)
    (dolist (hook '(text-mode-hook org-mode-hook))
      (add-hook hook (lambda () (flyspell-mode 1))))
    (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
      (add-hook hook (lambda () (flyspell-mode -1)))))
#+END_SRC
* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :init (global-flycheck-mode)
      :config (progn
                (add-hook 'after-init-hook #'global-flycheck-mode)
                ;; turn on flychecking globally
                (add-hook 'after-init-hook #'global-flycheck-mode)
                ;; disable jshint since we prefer eslint checking
                ;; disable json-jsonlist checking for json files
                (setq-default flycheck-disabled-checkers
                              (append flycheck-disabled-checkers
                                      '(javascript-jshint json-jsonlist)))

                ;; use eslint with web-mode for jsx files
                (setq flycheck-checkers '(javascript-eslint yaml-jsyaml))
                (flycheck-add-mode 'javascript-eslint 'web-mode)
                (flycheck-add-mode 'yaml-jsyaml 'yaml-mode)))
  #+END_SRC
* Company
We use the [[http://company-mode.github.io/][company-mode]] completion framework
#+BEGIN_SRC emacs-lisp
  (use-package company)
#+END_SRC
* Direnv
I make use of several different gopath, this makes use of the [[https://direnv.net/][direnv]]
tool to automatically update the environment of the current buffer
#+BEGIN_SRC emacs-lisp
  (use-package direnv
    :config
    (direnv-mode))
#+END_SRC

* ivy/counsel/swiper
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :init (progn
            (setq ivy-use-virtual-buffers t
                  enable-recursive-minibuffers t
                  ivy-count-format "(%d/%d) ")
            )
    :config (progn
              (ivy-mode 1)
              (ivy-set-display-transformer
               'counsel-M-X
               'counsel-M-X-transformer))
    :bind (("\C-s" . swiper)
           ( "C-c C-r" . ivy-resume)
           ("<f6>" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("M-X" . counsel-M-X)
           ("C-x C-f" . counsel-find-file)
           ("<f1> f" . counsel-describe-function)
           ("<f1> v" . counsel-describe-variable)
           ("<f1> l" . counsel-find-library)
           ("<f2> i" . counsel-info-lookup-symbol)
           ("<f2> u" . counsel-unicode-char)
           ("C-c g" . counsel-git)
           ("C-c j" . counsel-git-grep)
           ("C-c k" . counsel-ag)
           ("C-x l" . counsel-locate)
           ("C-S-o" . counsel-rhythmbox)
           :map read-expression-map
           ("C-r" . counsel-expression-history))
    )
  (defun counsel-M-X (&optional initial-input)
    "Ivy version of `execute-extended-command'.
  Optional INITIAL-INPUT is the initial input in the minibuffer."
    (interactive)
    (let* ((cands obarray)
           (pred 'commandp)
           (sort t))
      (when (require 'smex nil 'noerror)
        (unless smex-initialized-p
          (smex-initialize))
        (when (smex-detect-new-commands)
          (smex-update))
        ;; custom code for M-X, copied from counsel-M-x
        (setq commands
              (delete-dups
               (append (smex-extract-commands-from-keymap (current-local-map))
                       (smex-extract-commands-from-features major-mode))))
        (setq commands (smex-sort-according-to-cache commands))
        (setq cands (mapcar #'symbol-name commands))
        ;; end custom code
        (setq pred nil)
        (setq sort nil))
      ;; When `counsel-M-X' returns, `last-command' would be set to
      ;; `counsel-M-X' because :action hasn't been invoked yet.
      ;; Instead, preserve the old value of `this-command'.
      (setq this-command last-command)
      (setq real-this-command real-last-command)
      (ivy-read (counsel--M-X-prompt) cands
                :predicate pred
                :require-match t
                :history 'counsel-M-x-history
                :action
                (lambda (cmd)
                  (when (featurep 'smex)
                    (smex-rank (intern cmd)))
                  (let ((prefix-arg current-prefix-arg))
                    (setq real-this-command
                          (setq this-command (intern cmd)))
                    (command-execute (intern cmd) 'record)))
                :sort sort
                :keymap counsel-describe-map
                :initial-input initial-input
                :caller 'counsel-M-X)))

  (defun counsel--M-X-prompt ()
    "String for `M-X' plus the string representation of `current-prefix-arg'."
    (if (not current-prefix-arg)
        "M-X "
      (concat
       (if (eq current-prefix-arg '-)
           "- "
         (if (integerp current-prefix-arg)
             (format "%d " current-prefix-arg)
           (if (= (car current-prefix-arg) 4)
               "C-u "
             (format "%d " (car current-prefix-arg)))))
       "M-X ")))
  (defun counsel-M-X-transformer (cmd)
    "Return CMD appended with the corresponding binding in the current window."
    (let ((binding (substitute-command-keys (format "\\[%s]" cmd))))
      (setq binding (replace-regexp-in-string "C-x 6" "<f2>" binding))
      (if (string-match "^M-X" binding)
          cmd
        (format "%s (%s)"
                cmd (propertize binding 'face 'font-lock-keyword-face)))))
#+END_SRC
